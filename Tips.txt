# copy from numpy to vtkMatrix4x4
pr_vtk.DeepCopy(p_npy.ravel()) 
        
# copy from vtkMatrix4x4 to numpy
p_npy = np.zeros((4,4))
p_vtk.DeepCopy(p_npy.ravel(), p_vtk)

# get camera extrinsics
renderer.GetActiveCamera().GetViewTransformMatrix() # type: vtkMatrix4x4 -> can be printed


# Convert World to Display Coords

# Method 1
coordinate = vtk.vtkCoordinate()
coordinate.SetCoordinateSystemToWorld()
coordinate.SetValue(cam_pos[0,3], cam_pos[1,3], cam_pos[2,3])
disp1 = coordinate.GetComputedDisplayValue(self.vtk_widget_axial.ren)
disp2 = coordinate.GetComputedDisplayValue(self.vtk_widget_coronal.ren)
disp3 = coordinate.GetComputedDisplayValue(self.vtk_widget_sagittal.ren)

# Method 2
self.vtk_widget_axial.ren.SetWorldPoint(cam_pos[0,3], cam_pos[1,3], cam_pos[2,3], 1.0)
self.vtk_widget_axial.ren.WorldToDisplay()
disp1 = self.vtk_widget_axial.ren.GetDisplayPoint()
self.vtk_widget_coronal.ren.SetWorldPoint(cam_pos[0,3], cam_pos[1,3], cam_pos[2,3], 1.0)
self.vtk_widget_coronal.ren.WorldToDisplay()
disp2 = self.vtk_widget_coronal.ren.GetDisplayPoint()
self.vtk_widget_sagittal.ren.SetWorldPoint(cam_pos[0,3], cam_pos[1,3], cam_pos[2,3], 1.0)
self.vtk_widget_sagittal.ren.WorldToDisplay()
disp3 = self.vtk_widget_sagittal.ren.GetDisplayPoint()